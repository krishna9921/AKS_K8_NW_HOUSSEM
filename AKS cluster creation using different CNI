# create AKS Cluster using KUBENET  [ NODE POOL = 110 Pods/Node ] Total No of Nodes: 251 for a /24 CIDR

# Creation of resource group

az group create --name rg-aks-cni --location centralindia

# creating aks cluster with kubenet as CNI (DEFAULT)

az aks create -g rg-aks-cni -n aks-cni --network-plugin kubenet


# create AKS Cluster using AZURE CNI  [ NODE POOL = 30 Pods/Node ] Total No of Nodes: 8 for a /24 CIDR

az group create --name rg-aks-cni --location centralindia

az aks create -g rg-aks-cni -n aks-cni --network-plugin azure

# create AKS Cluster using AZURE CNI OVERLAY [ NODE POOL = 250 Pods/Node ]

az group create --name rg-aks-cni-overlay --location centralindia

az aks create -g rg-aks-cni-overlay -n aks-cni-overlay --network-plugin azure --network-plugin-mode overlay --pod-cidr 192.168.0.0/16 

################################################ Operations #####################################################################

# How to SSH to the AKS NODES 

* Name of the INFRSTRUCTURE RESOURCE GROUP // $CLUSTER_RESOURCE_GROUP
* NAME OF THE VM SCALE SET // $SCALE_SET_NAME

az vmss extension set --resource-group <> --vmss-name <> --name <> --publisher <> --version <> --protected-settings <>

az vmss update-instances --instance-ids '*' --resource-group $CLUSTER_RESOURCE_GROUP --name $SCALE_SET_NAME

kubectl run -it --rm aks-ssh --image=debian 

exec into the above container and install ssh 

> apt-get update && apt-get install openssh-client -y 

* COPY THE SSH KEYS 

kubectl cp ~/.ssh/id_rsa $(kubectl get pod -l run=aks-ssh -o jsonpath='{.items[0].metadata.name}'):/id_rsa

# Schedule Node Restarts with Kured 

helm repo add kured https://weaveworks.github.io/kured

helm upgrade kured kured/kured --namespace kured install --create-namespace --set nodeSelector <> --set configuration.startTime=9am 
--set configuration.endTime=11pm --set configuration.period=0h1m0s --set configurationtimeZone=

# Login to k8 cluster with kubelogin.

kubelogin convert-kubeconfig -l azurecli 


====================================++++++++++++++++ SCALING +++++++++++++++++++++++++==================================

## ENABLE CLUSTER AUTO SCALING.

az aks nodepool update --resource-group --name --cluster-name --enable-cluster-autoscaler --min-count --max-count 

### CREATE AKS CLUSTER with virtual nodes enabled => https://github.com/HoussemDellai/k8s-scalability/blob/master/virtual-node/virtual-node.yaml

=================================================*********** SECRETS USING CSI DRIVER ****************************======================

MAIN PAGE : https://github.com/HoussemDellai/docker-kubernetes-course/tree/main/40_secret_store_csi_keyvault

# Create a cluster with Secret store CSI and Workload Identity

az group create -n aks_rg -l westeurope

az aks create -g aks_rg -n aks_cluster --enable_addons azure-keyvault-secrets-provider --enable-secret-rotation --rotation-policy-interval 5m --enabl-oidc-issuer
--enable-workload-identity

# create azure key valut and secret 

az keyvault create -n <> -g <> --enable_rbac-authorization

az keyvault secret set --vault-name <> --name <> --value <>


# Create user assigned managed identity 

az identity create -g <> -n <>

az role assignment create --assignee <> --role "Key vault secrets user " --scope <>

# Configure federated credentials with managed identity

az identity create -g <> -n <>
az identity federated-credential create -n <> -g --identity-name <> --issuer <> --subject system:serviceaccount:${NAMESPACE_APP}:${SERVICE_ACCOUNT_NAME}

=====



